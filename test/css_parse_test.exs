defmodule CssParseTest do
  use ExUnit.Case, async: true
  use ExUnit.Parameterized

  import CssColors
  alias CssColors.{RGB, HSL}

  # todo: test invalid inputs

  test_with_params "hsl", fn string, struct ->
    assert parse!(string) == struct
    # assert to_string(struct) == string
  end do
    [
      {"#000000", %RGB{red: 0.0, green: 0.0, blue: 0.0, alpha: 1.0}},
      {"#101010", %RGB{red: 16.0, green: 16.0, blue: 16.0, alpha: 1.0}},
      {"#a0a0a0", %RGB{red: 160.0, green: 160.0, blue: 160.0, alpha: 1.0}},
      {"#a0A00A", %RGB{red: 160.0, green: 160.0, blue: 10.0, alpha: 1.0}},
      {"#ffFFEe", %RGB{red: 255.0, green: 255.0, blue: 238.0, alpha: 1.0}},
      {"#000", parse!("#000000")},
      {"#111", parse!("#111111")},
      {"#aaa", parse!("#aaaaaa")},
      {"#aA3", parse!("#aaaa33")},
      {"#fFE", parse!("#ffffee")},
      {"rgb(0, 0, 0)", %RGB{red: 0.0, green: 0.0, blue: 0.0, alpha: 1.0}},
      {"rgb(255, 123, 0)", %RGB{red: 255.0, green: 123.0, blue: 0.0, alpha: 1.0}},
      {"rgb(0, 0, 99)", %RGB{red: 0.0, green: 0.0, blue: 99.0, alpha: 1.0}},
      {"rgb(0%, 100%, 50%)", %RGB{red: 0.0, green: 255.0, blue: 127.5, alpha: 1.0}},
      {"rgba(12, 99, 200, 0)", %RGB{red: 12.0, green: 99.0, blue: 200.0, alpha: 0}},
      {"rgba(12, 99, 200, 1)", %RGB{red: 12.0, green: 99.0, blue: 200.0, alpha: 1.0}},
      {"rgba(12, 99, 200, 0.1)", %RGB{red: 12.0, green: 99.0, blue: 200.0, alpha: 0.1}},
      {"rgba(12, 99, 200, 0.5)", %RGB{red: 12.0, green: 99.0, blue: 200.0, alpha: 0.5}},
      {"rgba(12, 99, 200, 0.9999)", %RGB{red: 12.0, green: 99.0, blue: 200.0, alpha: 0.9999}},
      {"hsl(0,0%,0%)", %HSL{}},
      {"hsl(0,0%,100%)", %HSL{lightness: 1.0}},
      {"hsl(0,100%,50%)", %HSL{saturation: 1.0, lightness: 0.5}},
      {"hsl(120,100%,50%)", %HSL{hue: 120, saturation: 1.0, lightness: 0.5}},
      {"hsl(240,100%,50%)", %HSL{hue: 240, saturation: 1.0, lightness: 0.5}},
      {"hsl(60,100%,50%)", %HSL{hue: 60, saturation: 1.0, lightness: 0.5}},
      {"hsl(0,0%,75%)", %HSL{hue: 0, saturation: 0.0, lightness: 0.75}},
      {"hsla(240,100%,50%,0)", %HSL{hue: 240, saturation: 1.0, lightness: 0.5, alpha: 0.0}},
      {"hsla(60,100%,50%,1)", %HSL{hue: 60, saturation: 1.0, lightness: 0.5, alpha: 1.0}},
      {"hsla(0,0%,75%,0.5)", %HSL{hue: 0, saturation: 0.0, lightness: 0.75, alpha: 0.5}}
    ]
  end

  test_with_params "sass data", fn hsl_str, rgb_str ->
    hsl = parse!(hsl_str)
    rgb = parse!(rgb_str)
    # Compare strings in order to ignore fractions
    assert to_string(rgb) == hsl |> rgb |> to_string

    expected_hsl_string =
      case hsl.lightness do
        1.0 -> "hsl(0, 0%, 100%)"
        0.0 -> "hsl(0, 0%, 0%)"
        _ -> to_string(hsl)
      end

    assert expected_hsl_string == rgb |> hsl |> to_string
  end do
    # taken from https://raw.githubusercontent.com/sass/sass/7716e67f3507c6f65878c69aa49ec358ebf675c7/test/sass/data/hsl-rgb.txt
    [
      {"hsl(0, 100%, 50%)", "rgb(255, 0, 0)"},
      {"hsl(60, 100%, 50%)", "rgb(255, 255, 0)"},
      {"hsl(120, 100%, 50%)", "rgb(0, 255, 0)"},
      {"hsl(180, 100%, 50%)", "rgb(0, 255, 255)"},
      {"hsl(240, 100%, 50%)", "rgb(0, 0, 255)"},
      {"hsl(300, 100%, 50%)", "rgb(255, 0, 255)"},
      {"hsl(-360, 100%, 50%)", "rgb(255, 0, 0)"},
      {"hsl(-300, 100%, 50%)", "rgb(255, 255, 0)"},
      {"hsl(-240, 100%, 50%)", "rgb(0, 255, 0)"},
      {"hsl(-180, 100%, 50%)", "rgb(0, 255, 255)"},
      {"hsl(-120, 100%, 50%)", "rgb(0, 0, 255)"},
      {"hsl(-60, 100%, 50%)", "rgb(255, 0, 255)"},
      {"hsl(360, 100%, 50%)", "rgb(255, 0, 0)"},
      {"hsl(420, 100%, 50%)", "rgb(255, 255, 0)"},
      {"hsl(480, 100%, 50%)", "rgb(0, 255, 0)"},
      {"hsl(540, 100%, 50%)", "rgb(0, 255, 255)"},
      {"hsl(600, 100%, 50%)", "rgb(0, 0, 255)"},
      {"hsl(660, 100%, 50%)", "rgb(255, 0, 255)"},
      {"hsl(6120, 100%, 50%)", "rgb(255, 0, 0)"},
      {"hsl(-9660, 100%, 50%)", "rgb(255, 255, 0)"},
      {"hsl(99840, 100%, 50%)", "rgb(0, 255, 0)"},
      {"hsl(-900, 100%, 50%)", "rgb(0, 255, 255)"},
      {"hsl(-104880, 100%, 50%)", "rgb(0, 0, 255)"},
      {"hsl(2820, 100%, 50%)", "rgb(255, 0, 255)"},
      {"hsl(0, 100%, 50%)", "rgb(255, 0, 0)"},
      {"hsl(12, 100%, 50%)", "rgb(255, 51, 0)"},
      {"hsl(24, 100%, 50%)", "rgb(255, 102, 0)"},
      {"hsl(36, 100%, 50%)", "rgb(255, 153, 0)"},
      {"hsl(48, 100%, 50%)", "rgb(255, 204, 0)"},
      {"hsl(60, 100%, 50%)", "rgb(255, 255, 0)"},
      {"hsl(72, 100%, 50%)", "rgb(204, 255, 0)"},
      {"hsl(84, 100%, 50%)", "rgb(153, 255, 0)"},
      {"hsl(96, 100%, 50%)", "rgb(102, 255, 0)"},
      {"hsl(108, 100%, 50%)", "rgb(51, 255, 0)"},
      {"hsl(120, 100%, 50%)", "rgb(0, 255, 0)"},
      {"hsl(120, 100%, 50%)", "rgb(0, 255, 0)"},
      {"hsl(132, 100%, 50%)", "rgb(0, 255, 51)"},
      {"hsl(144, 100%, 50%)", "rgb(0, 255, 102)"},
      {"hsl(156, 100%, 50%)", "rgb(0, 255, 153)"},
      {"hsl(168, 100%, 50%)", "rgb(0, 255, 204)"},
      {"hsl(180, 100%, 50%)", "rgb(0, 255, 255)"},
      {"hsl(192, 100%, 50%)", "rgb(0, 204, 255)"},
      {"hsl(204, 100%, 50%)", "rgb(0, 153, 255)"},
      {"hsl(216, 100%, 50%)", "rgb(0, 102, 255)"},
      {"hsl(228, 100%, 50%)", "rgb(0, 51, 255)"},
      {"hsl(240, 100%, 50%)", "rgb(0, 0, 255)"},
      {"hsl(240, 100%, 50%)", "rgb(0, 0, 255)"},
      {"hsl(252, 100%, 50%)", "rgb(51, 0, 255)"},
      {"hsl(264, 100%, 50%)", "rgb(102, 0, 255)"},
      {"hsl(276, 100%, 50%)", "rgb(153, 0, 255)"},
      {"hsl(288, 100%, 50%)", "rgb(204, 0, 255)"},
      {"hsl(300, 100%, 50%)", "rgb(255, 0, 255)"},
      {"hsl(312, 100%, 50%)", "rgb(255, 0, 204)"},
      {"hsl(324, 100%, 50%)", "rgb(255, 0, 153)"},
      {"hsl(336, 100%, 50%)", "rgb(255, 0, 102)"},
      {"hsl(348, 100%, 50%)", "rgb(255, 0, 51)"},
      {"hsl(360, 100%, 50%)", "rgb(255, 0, 0)"},
      {"hsl(0, 20%, 50%)", "rgb(153, 102, 102)"},
      {"hsl(0, 60%, 50%)", "rgb(204, 51, 51)"},
      {"hsl(0, 100%, 50%)", "rgb(255, 0, 0)"},
      {"hsl(60, 20%, 50%)", "rgb(153, 153, 102)"},
      {"hsl(60, 60%, 50%)", "rgb(204, 204, 51)"},
      {"hsl(60, 100%, 50%)", "rgb(255, 255, 0)"},
      {"hsl(120, 20%, 50%)", "rgb(102, 153, 102)"},
      {"hsl(120, 60%, 50%)", "rgb(51, 204, 51)"},
      {"hsl(120, 100%, 50%)", "rgb(0, 255, 0)"},
      {"hsl(180, 20%, 50%)", "rgb(102, 153, 153)"},
      {"hsl(180, 60%, 50%)", "rgb(51, 204, 204)"},
      {"hsl(180, 100%, 50%)", "rgb(0, 255, 255)"},
      {"hsl(240, 20%, 50%)", "rgb(102, 102, 153)"},
      {"hsl(240, 60%, 50%)", "rgb(51, 51, 204)"},
      {"hsl(240, 100%, 50%)", "rgb(0, 0, 255)"},
      {"hsl(300, 20%, 50%)", "rgb(153, 102, 153)"},
      {"hsl(300, 60%, 50%)", "rgb(204, 51, 204)"},
      {"hsl(300, 100%, 50%)", "rgb(255, 0, 255)"},
      {"hsl(0, 100%, 0%)", "rgb(0, 0, 0)"},
      {"hsl(0, 100%, 10%)", "rgb(51, 0, 0)"},
      {"hsl(0, 100%, 20%)", "rgb(102, 0, 0)"},
      {"hsl(0, 100%, 30%)", "rgb(153, 0, 0)"},
      {"hsl(0, 100%, 40%)", "rgb(204, 0, 0)"},
      {"hsl(0, 100%, 50%)", "rgb(255, 0, 0)"},
      {"hsl(0, 100%, 60%)", "rgb(255, 51, 51)"},
      {"hsl(0, 100%, 70%)", "rgb(255, 102, 102)"},
      {"hsl(0, 100%, 80%)", "rgb(255, 153, 153)"},
      {"hsl(0, 100%, 90%)", "rgb(255, 204, 204)"},
      {"hsl(0, 100%, 100%)", "rgb(255, 255, 255)"},
      {"hsl(60, 100%, 0%)", "rgb(0, 0, 0)"},
      {"hsl(60, 100%, 10%)", "rgb(51, 51, 0)"},
      {"hsl(60, 100%, 20%)", "rgb(102, 102, 0)"},
      {"hsl(60, 100%, 30%)", "rgb(153, 153, 0)"},
      {"hsl(60, 100%, 40%)", "rgb(204, 204, 0)"},
      {"hsl(60, 100%, 50%)", "rgb(255, 255, 0)"},
      {"hsl(60, 100%, 60%)", "rgb(255, 255, 51)"},
      {"hsl(60, 100%, 70%)", "rgb(255, 255, 102)"},
      {"hsl(60, 100%, 80%)", "rgb(255, 255, 153)"},
      {"hsl(60, 100%, 90%)", "rgb(255, 255, 204)"},
      {"hsl(60, 100%, 100%)", "rgb(255, 255, 255)"},
      {"hsl(120, 100%, 0%)", "rgb(0, 0, 0)"},
      {"hsl(120, 100%, 10%)", "rgb(0, 51, 0)"},
      {"hsl(120, 100%, 20%)", "rgb(0, 102, 0)"},
      {"hsl(120, 100%, 30%)", "rgb(0, 153, 0)"},
      {"hsl(120, 100%, 40%)", "rgb(0, 204, 0)"},
      {"hsl(120, 100%, 50%)", "rgb(0, 255, 0)"},
      {"hsl(120, 100%, 60%)", "rgb(51, 255, 51)"},
      {"hsl(120, 100%, 70%)", "rgb(102, 255, 102)"},
      {"hsl(120, 100%, 80%)", "rgb(153, 255, 153)"},
      {"hsl(120, 100%, 90%)", "rgb(204, 255, 204)"},
      {"hsl(120, 100%, 100%)", "rgb(255, 255, 255)"},
      {"hsl(180, 100%, 0%)", "rgb(0, 0, 0)"},
      {"hsl(180, 100%, 10%)", "rgb(0, 51, 51)"},
      {"hsl(180, 100%, 20%)", "rgb(0, 102, 102)"},
      {"hsl(180, 100%, 30%)", "rgb(0, 153, 153)"},
      {"hsl(180, 100%, 40%)", "rgb(0, 204, 204)"},
      {"hsl(180, 100%, 50%)", "rgb(0, 255, 255)"},
      {"hsl(180, 100%, 60%)", "rgb(51, 255, 255)"},
      {"hsl(180, 100%, 70%)", "rgb(102, 255, 255)"},
      {"hsl(180, 100%, 80%)", "rgb(153, 255, 255)"},
      {"hsl(180, 100%, 90%)", "rgb(204, 255, 255)"},
      {"hsl(180, 100%, 100%)", "rgb(255, 255, 255)"},
      {"hsl(240, 100%, 0%)", "rgb(0, 0, 0)"},
      {"hsl(240, 100%, 10%)", "rgb(0, 0, 51)"},
      {"hsl(240, 100%, 20%)", "rgb(0, 0, 102)"},
      {"hsl(240, 100%, 30%)", "rgb(0, 0, 153)"},
      {"hsl(240, 100%, 40%)", "rgb(0, 0, 204)"},
      {"hsl(240, 100%, 50%)", "rgb(0, 0, 255)"},
      {"hsl(240, 100%, 60%)", "rgb(51, 51, 255)"},
      {"hsl(240, 100%, 70%)", "rgb(102, 102, 255)"},
      {"hsl(240, 100%, 80%)", "rgb(153, 153, 255)"},
      {"hsl(240, 100%, 90%)", "rgb(204, 204, 255)"},
      {"hsl(240, 100%, 100%)", "rgb(255, 255, 255)"},
      {"hsl(300, 100%, 0%)", "rgb(0, 0, 0)"},
      {"hsl(300, 100%, 10%)", "rgb(51, 0, 51)"},
      {"hsl(300, 100%, 20%)", "rgb(102, 0, 102)"},
      {"hsl(300, 100%, 30%)", "rgb(153, 0, 153)"},
      {"hsl(300, 100%, 40%)", "rgb(204, 0, 204)"},
      {"hsl(300, 100%, 50%)", "rgb(255, 0, 255)"},
      {"hsl(300, 100%, 60%)", "rgb(255, 51, 255)"},
      {"hsl(300, 100%, 70%)", "rgb(255, 102, 255)"},
      {"hsl(300, 100%, 80%)", "rgb(255, 153, 255)"},
      {"hsl(300, 100%, 90%)", "rgb(255, 204, 255)"},
      {"hsl(300, 100%, 100%)", "rgb(255, 255, 255)"}
    ]
  end

  test_with_params "parse without !", fn string, color ->
    {:ok, generated_color} = parse(string)
    assert to_string(generated_color) == to_string(color)
  end do
    [
      {"#ffFFEe", %RGB{red: 255.0, green: 255.0, blue: 238.0, alpha: 1.0}},
      {"#ffE", parse!("#ffffee")},
      {"rgb(255, 123, 0)", %RGB{red: 255.0, green: 123.0, blue: 0.0, alpha: 1.0}},
      {"rgb(0%, 100%, 50%)", %RGB{red: 0.0, green: 255.0, blue: 127.5, alpha: 1.0}},
      {"rgba(12, 99, 200, 0.5)", %RGB{red: 12.0, green: 99.0, blue: 200.0, alpha: 0.5}},
      {"hsl(0,0%,75%)", %HSL{hue: 0, saturation: 0.0, lightness: 0.75}},
      {"hsla(240,100%,50%,0)", %HSL{hue: 240, saturation: 1.0, lightness: 0.5, alpha: 0.0}}
    ]
  end
end
